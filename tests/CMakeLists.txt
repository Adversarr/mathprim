find_package(GTest REQUIRED)
enable_testing()

macro(mathprim_add_example EXAMPLE_NAME SOURCE_FILES)
  add_executable(${EXAMPLE_NAME} ${SOURCE_FILES})
  target_link_libraries(${EXAMPLE_NAME} PRIVATE mathprim)
  target_compile_options(${EXAMPLE_NAME} PRIVATE -march=native)
endmacro(mathprim_add_example)

macro(mathprim_add_testing EXAMPLE_NAME SOURCE_FILES)
  add_executable(${EXAMPLE_NAME} ${SOURCE_FILES})
  target_link_libraries(${EXAMPLE_NAME} PRIVATE mathprim GTest::GTest GTest::Main)
  target_compile_options(${EXAMPLE_NAME} PRIVATE -march=native)
  add_test(NAME ${EXAMPLE_NAME} COMMAND ${EXAMPLE_NAME})
endmacro(mathprim_add_testing)

add_subdirectory(benchmark)
add_subdirectory(cg_solver)
add_subdirectory(cholmod)
add_subdirectory(cpu_blas)
add_subdirectory(dim_iterator)
add_subdirectory(eigen)
add_subdirectory(extreme_test)
add_subdirectory(geometry)
add_subdirectory(hello_world)
add_subdirectory(npyio)
add_subdirectory(nystorm)
add_subdirectory(omp)
add_subdirectory(optim)
add_subdirectory(sparse_csr)
if(MATHPRIM_BUILD_TESTS_CUDA)
  add_subdirectory(hello_world_cuda)
  add_subdirectory(cublas)
  add_subdirectory(sparse)
  add_subdirectory(cuda_training_series)

  add_subdirectory(eigen_cuda)
endif()